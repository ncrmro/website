name: Playwright Tests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-node@v3
      with:
        node-version: 20

    - uses: pnpm/action-setup@v2
      name: Install pnpm
      id: pnpm-install
      with:
        run_install: false

    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v3
      name: Setup pnpm cache
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile --prefer-offline

    - name: Get installed Playwright version
      id: playwright-version
#      run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" >> $GITHUB_ENV
# If we update playwright we have to manually update here or parse the pnpm-lock.yaml version
      run: echo "PLAYWRIGHT_VERSION=1.35.1" >> $GITHUB_ENV

    - name: Cache playwright binaries
      uses: actions/cache@v3
      id: playwright-cache
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

    - name: Install Playwright Browsers
      run: pnpm exec playwright install --with-deps
      if: steps.playwright-cache.outputs.cache-hit != 'true'

    - name: Run build
      run: |
        pnpm run build-migrations
        pnpm run migrations

    - name: Run Playwright tests
      run: pnpm exec playwright test

    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-test-results
        path: test-results/
        retention-days: 30
